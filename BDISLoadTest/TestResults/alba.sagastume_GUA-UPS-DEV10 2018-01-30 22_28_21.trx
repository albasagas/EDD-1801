<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="010da185-1f8b-4c78-842f-c5000a359ca2" name="alba.sagastume@GUA-UPS-DEV10 2018-01-30 22:28:21" runUser="UPSDIV\alba.sagastume" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="Local" id="053dc93a-72f9-41c7-a901-55fa045aa5a9">
    <Description>These are default test settings for a local test run.</Description>
    <Execution>
      <TestTypeSpecific />
      <AgentRule name="Execution Agents">
      </AgentRule>
    </Execution>
    <Deployment runDeploymentRoot="alba.sagastume_GUA-UPS-DEV10 2018-01-30 22_28_21" />
    <Properties>
      <Property name="TestSettingsUIType" value="LoadTest" />
    </Properties>
  </TestSettings>
  <Times creation="2018-01-30T22:28:21.6754291-06:00" queuing="2018-01-30T22:28:22.1284538-06:00" start="2018-01-30T22:28:22.3158972-06:00" finish="2018-01-30T22:28:35.7794989-06:00" />
  <ResultSummary outcome="Failed">
    <Counters total="1" executed="1" error="0" failed="1" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" passed="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <WebTest name="WebTest1" storage="c:\users\alba.sagastume\documents\visual studio 2015\projects\bdisloadtest\bdisloadtest\webtest1.webtest" id="6a42c19a-465b-4288-a11d-82918b69f082" persistedWebTest="">
      <Execution id="a5501104-85af-4d98-a9ab-4785bcbd9615" />
    </WebTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry isTransparent="false" testId="6a42c19a-465b-4288-a11d-82918b69f082" executionId="a5501104-85af-4d98-a9ab-4785bcbd9615" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <WebTestResult executionId="a5501104-85af-4d98-a9ab-4785bcbd9615" testId="6a42c19a-465b-4288-a11d-82918b69f082" testName="WebTest1" computerName="GUA-UPS-DEV10" duration="00:00:02.6817290" startTime="2018-01-30T22:28:22.3627628-06:00" endTime="2018-01-30T22:28:35.7014269-06:00" testType="4e7599fa-5ecb-43e9-a887-cd63cf72d207" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a5501104-85af-4d98-a9ab-4785bcbd9615">
      <Output>
        <ErrorInfo>
          <Message>3 primary requests, 0 dependant requests and 0 conditional rules failed</Message>
        </ErrorInfo>
      </Output>
      <ResultFiles>
        <ResultFile path="WebTest1.webtestResult" />
      </ResultFiles>
      <TestSettings name="Local" id="053dc93a-72f9-41c7-a901-55fa045aa5a9">
        <Description>These are default test settings for a local test run.</Description>
        <Execution>
          <TestTypeSpecific>
            <WebTestRunConfiguration testTypeId="4e7599fa-5ecb-43e9-a887-cd63cf72d207">
              <Browser name="Internet Explorer 9.0" MaxConnections="6">
                <Headers>
                  <Header name="User-Agent" value="Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)" />
                  <Header name="Accept" value="*/*" />
                  <Header name="Accept-Language" value="{{$IEAcceptLanguage}}" />
                  <Header name="Accept-Encoding" value="GZIP" />
                </Headers>
              </Browser>
            </WebTestRunConfiguration>
          </TestTypeSpecific>
          <AgentRule name="Execution Agents">
          </AgentRule>
        </Execution>
        <Deployment runDeploymentRoot="alba.sagastume_GUA-UPS-DEV10 2018-01-30 22_28_21" />
        <Properties>
          <Property name="TestSettingsUIType" value="LoadTest" />
        </Properties>
      </TestSettings>
      <WebTestResultFilePath>alba.sagastume_GUA-UPS-DEV10 2018-01-30 22_28_21\In\a5501104-85af-4d98-a9ab-4785bcbd9615\WebTest1.webtestResult</WebTestResultFilePath>
    </WebTestResult>
  </Results>
</TestRun>